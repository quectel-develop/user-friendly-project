---
Language:        Cpp
# BasedOnStyle:  Quectel_sw10
AccessModifierOffset: -4  # Access modifier offset set to -4
AlignAfterOpenBracket: BlockIndent  # Align after opening bracket: block indent
AlignArrayOfStructures: None  # Do not align arrays of structures
AlignConsecutiveMacros:
  Enabled: true  # Enable consecutive macro alignment
  AcrossEmptyLines: true  # Align across empty lines
  AcrossComments: true  # Align across comments
  AlignCompound: true  # Align compound statements
  PadOperators: true  # Pad operators
AlignConsecutiveBitFields:
  Enabled: true  # Enable consecutive bit field alignment
  AcrossEmptyLines: true  # Align across empty lines
  AcrossComments: true  # Align across comments
  AlignCompound: true  # Align compound statements
  PadOperators: true  # Pad operators
AlignConsecutiveDeclarations:
  Enabled: true  # Enable consecutive declaration alignment
  AcrossEmptyLines: false  # Do not align across empty lines
  AcrossComments: false  # Do not align across comments
AlignEscapedNewlines: Right  # Align escaped newlines to the right
AlignOperands: true  # Align operands
AlignTrailingComments: true  # Align trailing comments
AllowAllArgumentsOnNextLine: false  # Do not allow all arguments on next line
AllowAllParametersOfDeclarationOnNextLine: false  # Do not allow all declaration parameters on next line
AllowShortEnumsOnASingleLine: false  # Do not allow short enums on a single line
AllowShortBlocksOnASingleLine: Empty  # Only allow empty short blocks on a single line
AllowShortCaseLabelsOnASingleLine: false  # Do not allow short case labels on a single line
AllowShortFunctionsOnASingleLine: InlineOnly  # Only allow inline short functions on a single line
AllowShortLambdasOnASingleLine: None  # Do not allow short lambdas on a single line
AllowShortIfStatementsOnASingleLine: Never  # Never allow short if statements on a single line
AllowShortLoopsOnASingleLine: true  # Allow short loops on a single line
AlwaysBreakAfterDefinitionReturnType: None  # Do not break after definition return type
AlwaysBreakAfterReturnType: None  # Do not break after return type
AlwaysBreakBeforeMultilineStrings: true  # Break before multiline strings
AlwaysBreakTemplateDeclarations: Yes  # Always break template declarations
AttributeMacros:
  - __capability  # Attribute macro definition
BinPackArguments: false  # Do not bin pack function arguments
BinPackParameters: false  # Do not bin pack function parameters
BraceWrapping:
  AfterCaseLabel:  false  # Do not wrap after case label
  AfterClass:      true  # Wrap after class declaration
  AfterControlStatement: Always  # Always wrap after control statements
  AfterEnum:       true  # Wrap after enum declaration
  AfterFunction:   true  # Wrap after function declaration
  AfterNamespace:  true  # Wrap after namespace declaration
  AfterObjCDeclaration: true  # Wrap after Objective-C declaration
  AfterStruct:     true  # Wrap after struct declaration
  AfterUnion:      true  # Wrap after union declaration
  AfterExternBlock: true  # Wrap after extern "C" block
  BeforeCatch:     true  # Wrap before catch
  BeforeElse:      true  # Wrap before else
  BeforeLambdaBody: true  # Wrap before lambda body
  BeforeWhile:     false  # Do not wrap before while
  IndentBraces:    false  # Do not indent braces
  SplitEmptyFunction: true  # Split empty functions
  SplitEmptyRecord: true  # Split empty records (classes, structs, etc.)
  SplitEmptyNamespace: true  # Split empty namespaces
BreakBeforeBinaryOperators: true  # Break before binary operators
BreakBeforeConceptDeclarations: true  # Break before concept declarations
BreakBeforeBraces: Custom  # Custom brace wrapping style
BreakBeforeInheritanceComma: false  # Do not break before inheritance comma
BreakInheritanceList: BeforeColon  # Break inheritance list before colon
BreakBeforeTernaryOperators: true  # Break before ternary operators
BreakConstructorInitializersBeforeComma: false  # Do not break constructor initializers before comma
BreakConstructorInitializers: BeforeColon  # Break constructor initializers before colon
BreakAfterJavaFieldAnnotations: false  # Do not break after Java field annotations
BreakArrays: true  # Break arrays
BreakStringLiterals: true  # Break string literals
ColumnLimit:     160  # Column limit set to 160
CommentPragmas:  '^ NOLINT:'  # Comment pragmas matching regex '^ NOLINT:'
QualifierAlignment: Leave  # Keep qualifier alignment as is
CompactNamespaces: false  # Do not use compact namespace format
ConstructorInitializerIndentWidth: 4  # Constructor initializer indent width set to 4
ContinuationIndentWidth: 4  # Continuation indent width set to 4
Cpp11BracedListStyle: true  # Use C++11 braced list style
DeriveLineEnding: true  # Automatically derive line ending
DerivePointerAlignment: true  # Automatically derive pointer alignment
DisableFormat:   false  # Do not disable formatting
EmptyLineAfterAccessModifier: Never  # Never add empty line after access modifier
EmptyLineBeforeAccessModifier: LogicalBlock  # Add empty line before access modifier (logical block)
ExperimentalAutoDetectBinPacking: false  # Do not enable experimental auto bin packing detection
PackConstructorInitializers: Never  # Never pack constructor initializers
BasedOnStyle:    ''  # Based on style (empty)
ConstructorInitializerAllOnOneLineOrOnePerLine: false  # Constructor initializers not all on one line or one per line
FixNamespaceComments: true  # Fix namespace comments
ForEachMacros:
  - foreach  # for-each macro
  - Q_FOREACH  # Qt for-each macro
  - BOOST_FOREACH  # Boost for-each macro
IfMacros:
  - KJ_IF_MAYBE  # KJ_IF_MAYBE macro
IncludeBlocks:   Regroup  # Regroup include blocks
IncludeCategories:
  - Regex:           '^<ext/.*\.h>'  # Match regex '^<ext/.*\.h>'
    Priority:        2  # Priority set to 2
    SortPriority:    0  # Sort priority set to 0
    CaseSensitive:   false  # Case insensitive
  - Regex:           '^<.*\.h>'  # Match regex '^<.*\.h>'
    Priority:        1  # Priority set to 1
    SortPriority:    0  # Sort priority set to 0
    CaseSensitive:   false  # Case insensitive
  - Regex:           '^<.*'  # Match regex '^<.*'
    Priority:        2  # Priority set to 2
    SortPriority:    0  # Sort priority set to 0
    CaseSensitive:   false  # Case insensitive
  - Regex:           '.*'  # Match regex '.*'
    Priority:        3  # Priority set to 3
    SortPriority:    0  # Sort priority set to 0
    CaseSensitive:   false  # Case insensitive
IncludeIsMainRegex: '([-_](test|unittest))?$'  # Include main regex
IncludeIsMainSourceRegex: ''  # Include main source regex (empty)
IndentAccessModifiers: false  # Do not indent access modifiers
IndentCaseLabels: true  # Indent case labels
IndentCaseBlocks: false  # Do not indent case blocks
IndentGotoLabels: true  # Indent goto labels
IndentPPDirectives: None  # Do not indent preprocessor directives
IndentExternBlock: AfterExternBlock  # Indent after extern block
IndentRequires:  false  # Do not indent requires clauses
IndentWidth:     4  # Indent width set to 4
IndentWrappedFunctionNames: false  # Do not indent wrapped function names
InsertTrailingCommas: None  # Do not insert trailing commas
JavaScriptQuotes: Leave  # Keep JavaScript quotes as is
JavaScriptWrapImports: true  # Wrap JavaScript import statements
KeepEmptyLinesAtTheStartOfBlocks: false  # Do not keep empty lines at start of blocks
LambdaBodyIndentation: Signature  # Lambda body indentation by signature
MacroBlockBegin: ''  # Macro block begin marker (empty)
MacroBlockEnd:   ''  # Macro block end marker (empty)
MaxEmptyLinesToKeep: 1  # Maximum empty lines to keep set to 1
NamespaceIndentation: None  # Do not indent namespaces
ObjCBinPackProtocolList: Never  # Never bin pack Objective-C protocol lists
ObjCBlockIndentWidth: 2  # Objective-C block indent width set to 2
ObjCBreakBeforeNestedBlockParam: true  # Break before nested block parameters
ObjCSpaceAfterProperty: false  # No space after property
ObjCSpaceBeforeProtocolList: true  # Space before protocol list
PenaltyBreakAssignment: 2  # Penalty for breaking assignment set to 2
PenaltyBreakBeforeFirstCallParameter: 1  # Penalty for breaking before first call parameter set to 1
PenaltyBreakComment: 300  # Penalty for breaking comment set to 300
PenaltyBreakFirstLessLess: 120  # Penalty for breaking before first << operator set to 120
PenaltyBreakOpenParenthesis: 0  # Penalty for breaking before open parenthesis set to 0
PenaltyBreakString: 1000  # Penalty for breaking string set to 1000
PenaltyBreakTemplateDeclaration: 10  # Penalty for breaking template declaration set to 10
PenaltyExcessCharacter: 1000000  # Penalty for excess characters set to 1000000
PenaltyReturnTypeOnItsOwnLine: 200  # Penalty for return type on its own line set to 200
PenaltyIndentedWhitespace: 0  # Penalty for indented whitespace set to 0
PointerAlignment: Right  # Pointer alignment to the right
PPIndentWidth:   -1  # Preprocessor directive indent width set to -1 (no indent)
RawStringFormats:
  - Language:        Cpp  # Language is C++
    Delimiters:
      - cc  # Delimiter is cc
      - CC  # Delimiter is CC
      - cpp  # Delimiter is cpp
      - Cpp  # Delimiter is Cpp
      - CPP  # Delimiter is CPP
      - 'c++'  # Delimiter is 'c++'
      - 'C++'  # Delimiter is 'C++'
    CanonicalDelimiter: ''  # Canonical delimiter (empty)
    BasedOnStyle:    Quectel_sw10  # Based on Quectel_sw10 style
  - Language:        TextProto  # Language is TextProto
    Delimiters:
      - pb  # Delimiter is pb
      - PB  # Delimiter is PB
      - proto  # Delimiter is proto
      - PROTO  # Delimiter is PROTO
    EnclosingFunctions:
      - EqualsProto  # Enclosing function EqualsProto
      - EquivToProto  # Enclosing function EquivToProto
      - PARSE_PARTIAL_TEXT_PROTO  # Enclosing function PARSE_PARTIAL_TEXT_PROTO
      - PARSE_TEST_PROTO  # Enclosing function PARSE_TEST_PROTO
      - PARSE_TEXT_PROTO  # Enclosing function PARSE_TEXT_PROTO
      - ParseTextOrDie  # Enclosing function ParseTextOrDie
      - ParseTextProtoOrDie  # Enclosing function ParseTextProtoOrDie
      - ParseTestProto  # Enclosing function ParseTestProto
      - ParsePartialTestProto  # Enclosing function ParsePartialTestProto
    CanonicalDelimiter: pb  # Canonical delimiter is pb
    BasedOnStyle:    Quectel_sw10  # Based on Quectel_sw10 style
ReferenceAlignment: Right  # Reference alignment to the right
ReflowComments:  false  # Do not reflow comments
RemoveBracesLLVM: false  # Do not remove LLVM-style braces
SeparateDefinitionBlocks: Leave  # Keep definition blocks separate
ShortNamespaceLines: 1  # Short namespace line limit set to 1
SortIncludes:    false  # Do not sort includes
SortJavaStaticImport: Before  # Place Java static imports first when sorting
SortUsingDeclarations: false  # Do not sort using declarations
SpaceAfterCStyleCast: false  # No space after C-style cast
SpaceAfterLogicalNot: false  # No space after logical not operator
SpaceAfterTemplateKeyword: true  # Space after template keyword
SpaceBeforeAssignmentOperators: true  # Space before assignment operators
SpaceBeforeCaseColon: false  # No space before case colon
SpaceBeforeCpp11BracedList: false  # No space before C++11 braced list
SpaceBeforeCtorInitializerColon: true  # Space before constructor initializer colon
SpaceBeforeInheritanceColon: true  # Space before inheritance colon
SpaceBeforeParens: ControlStatements  # Space before parentheses in control statements
SpaceBeforeParensOptions:
  AfterControlStatements: true  # Space after control statements
  AfterForeachMacros: true  # Space after for-each macros
  AfterFunctionDefinitionName: false  # No space after function definition name
  AfterFunctionDeclarationName: false  # No space after function declaration name
  AfterIfMacros: true  # Space after if macros
  AfterOverloadedOperator: false  # No space after overloaded operator
  BeforeNonEmptyParentheses: false  # No space before non-empty parentheses
SpaceAroundPointerQualifiers: Default  # Space around pointer qualifiers uses default
SpaceBeforeRangeBasedForLoopColon: true  # Space before range-based for loop colon
SpaceInEmptyBlock: false  # No space in empty block
SpaceInEmptyParentheses: false  # No space in empty parentheses
SpacesBeforeTrailingComments: 2  # 2 spaces before trailing comments
SpacesInAngles: Never  # No spaces in angle brackets
SpacesInConditionalStatement: false  # No spaces in conditional statements
SpacesInContainerLiterals: false  # No spaces in container literals
SpacesInCStyleCastParentheses: false  # No spaces in C-style cast parentheses
SpacesInLineCommentPrefix:
  Minimum:         1  # Minimum spaces before line comment set to 1
  Maximum:         -1  # Maximum spaces before line comment unlimited
SpacesInParentheses: false  # No spaces in parentheses
SpacesInSquareBrackets: false  # No spaces in square brackets
SpaceBeforeSquareBrackets: false  # No space before square brackets
BitFieldColonSpacing: Both  # Space on both sides of bit field colon
Standard:        Auto  # Automatically select standard
StatementAttributeLikeMacros:
  - Q_EMIT  # Statement attribute-like macro Q_EMIT
StatementMacros:
  - Q_UNUSED  # Statement macro Q_UNUSED
  - QT_REQUIRE_VERSION  # Statement macro QT_REQUIRE_VERSION
TabWidth:        4  # Tab width set to 4
UseCRLF:         false  # Do not use CRLF line endings
UseTab:          Never  # Never use tabs
WhitespaceSensitiveMacros:
  - STRINGIZE  # Whitespace-sensitive macro STRINGIZE
  - PP_STRINGIZE  # Whitespace-sensitive macro PP_STRINGIZE
  - BOOST_PP_STRINGIZE  # Whitespace-sensitive macro BOOST_PP_STRINGIZE
  - NS_SWIFT_NAME  # Whitespace-sensitive macro NS_SWIFT_NAME
  - CF_SWIFT_NAME  # Whitespace-sensitive macro CF_SWIFT_NAME
...
