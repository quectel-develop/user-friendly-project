#include "QuectelConfig.h"
#include "qosa_def.h"

#ifdef __QUECTEL_UFP_FEATURE_SUPPORT_SSL__
/*
 * Copyright (c) 2006-2018, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2018-10-12     armink       first version
 */
#ifndef __QL_SSL_H__
#define __QL_SSL_H__

#include <at.h>

typedef enum {
    QL_SSLCFG_SSLVERSION,
    QL_SSLCFG_CIPHERSUITE,
    QL_SSLCFG_CACERT,
    QL_SSLCFG_CLIENTCERT,
    QL_SSLCFG_CLIENTKEY,
    QL_SSLCFG_SECLEVEL,
    QL_SSLCFG_SESSION,
    QL_SSLCFG_SNI,
    QL_SSLCFG_CHECKHOST,
    QL_SSLCFG_IGNORELOCALTIME,
    QL_SSLCFG_NEGOTIATETIME,
    QL_SSLCFG_RENEGOTIATION,
    QL_SSLCFG_DTLS,
    QL_SSLCFG_DTLSVERSION

} ql_sslcfg_type;

// Enum type for SSL Version
typedef enum {
    SSL_VERSION_SSL3_0 = 0,
    SSL_VERSION_TLS1_0,
    SSL_VERSION_TLS1_1,
    SSL_VERSION_TLS1_2,
    SSL_VERSION_ALL
} ql_ssl_version;

// Enum type for SSL Cipher Suites
typedef enum {
    CIPHER_SUITE_TLS_RSA_WITH_AES_256_CBC_SHA = 0x0035,
    CIPHER_SUITE_TLS_RSA_WITH_AES_128_CBC_SHA = 0x002F,
    CIPHER_SUITE_TLS_RSA_WITH_RC4_128_SHA = 0x0005,
    CIPHER_SUITE_TLS_RSA_WITH_RC4_128_MD5 = 0x0004,
    CIPHER_SUITE_TLS_RSA_WITH_3DES_EDE_CBC_SHA = 0x000A,
    CIPHER_SUITE_TLS_RSA_WITH_AES_256_CBC_SHA256 = 0x003D,
    CIPHER_SUITE_TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 0xC002,
    CIPHER_SUITE_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 0xC003,
    CIPHER_SUITE_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0xC004,
    CIPHER_SUITE_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0xC005,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 0xC007,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 0xC008,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xC009,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xC00A,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_RC4_128_SHA = 0xC011,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 0xC012,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xC013,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xC014,
    CIPHER_SUITE_TLS_ECDH_RSA_WITH_RC4_128_SHA = 0xC00C,
    CIPHER_SUITE_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 0xC00D,
    CIPHER_SUITE_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 0xC00E,
    CIPHER_SUITE_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 0xC00F,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC023,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC024,
    CIPHER_SUITE_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 0xC025,
    CIPHER_SUITE_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 0xC026,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xC027,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xC028,
    CIPHER_SUITE_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 0xC029,
    CIPHER_SUITE_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 0xC02A,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xC02B,
    CIPHER_SUITE_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xC02F,
    CIPHER_SUITE_TLS_PSK_WITH_AES_128_CCM_8 = 0xC0A8,
    CIPHER_SUITE_TLS_PSK_WITH_AES_128_CBC_SHA256 = 0x00AE,
    CIPHER_SUITE_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 0xC0AE,
    CIPHER_SUITE_SUPPORT_ALL = 0xFFFF
} ql_cipher_suites;

// Enum type for Authentication Mode
typedef enum {
    SEC_LEVEL_NO_AUTHENTICATION = 0,
    SEC_LEVEL_SERVER_AUTHENTICATION,
    SEC_LEVEL_SERVER_AND_CLIENT_AUTHENTICATION
} ql_sec_level;

// Enum type for DTLS Version
typedef enum {
    DTLS_VERSION_DTLS1_0 = 0,
    DTLS_VERSION_DTLS1_2,
    DTLS_VERSION_BOTH
} ql_dtls_version;

typedef struct {
    at_client_t client; // auto set inside
    u8_t sslenble;
    u8_t ssltype;
    u8_t sslctxid;
    ql_cipher_suites ciphersuite;
    ql_sec_level seclevel;
    ql_ssl_version sslversion;
    char *cacert_src;
    char *clientcert_src;
    char *clientkey_src;
    char *cacert_dst_path;
    char *clientcert_dst_path;
    char *clientkey_dst_path;
    bool src_is_path;
} ql_SSL_Config;


int configure_ssl(ql_SSL_Config *config);
#endif /* __QL_SSL_H__ */
#endif /* __QUECTEL_UFP_FEATURE_SUPPORT_SSL__ */

